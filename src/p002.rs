// Problem 2
//
// Each new term in the Fibonacci sequence is generated by adding the previous
// two terms. By starting with 1 and 2, the first 10 terms will be:
//
//     1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//
// By considering the terms in the Fibonacci sequence whose values do not
// exceed four million, find the sum of the even-valued terms.
pub fn sum_even_fib(bound: u32) -> u32 {
    fib(bound).iter()
        .filter(|&x| x % 2 == 0)
        .fold(0, |sum, x| sum + x)
}

pub fn fib(bound: u32) -> Vec<u32> {
    let mut seq: Vec<u32> = vec![1, 1];

    for n in 1.. {
        let x = seq[n - 1] + seq[n];
        if x > bound { break; }
        seq.push(x);
    }

    seq
}

// Following the overview
pub fn sum_even_fib_2(b: u32) -> u32 {
    let mut s = 0;
    let mut x = 1;
    let mut y = 1;

    while y < b {
        let z = x + y;
        x = y;
        y = z;
        if y % 2 == 0 { s += y; }
    }

    s
}


fn nth_fib(n: u32) -> u32 {
    if n == 0 { return 0; }

    (1..n)
        .fold((0, 1), |(x, y), _| (y, x + y))
        .1
}

pub fn sum_even_fib_3(bound: u32) -> u32 {
    (1..)
        .map(nth_fib)
        .take_while(|&n| n <= bound)
        .filter(|&x| x % 2 == 0)
        .fold(0, |sum, n| sum + n)
}

pub fn sum_even_fib_4(bound: u32) -> u32 {
    Fibonacci::new()
        .take_while(|&n| n <= bound)
        .filter(|&x| x % 2 == 0)
        .fold(0, |sum, n| sum + n)
}

#[derive(Debug)]
pub struct Fibonacci {
    previous: u32,
    current: u32
}

impl Fibonacci {
    fn new() -> Fibonacci {
        Fibonacci { previous: 1, current: 1 }
    }
}

impl Iterator for Fibonacci {
    type Item = u32;

    fn next(&mut self) -> Option<u32> {
        let next = self.previous + self.current;

        self.previous = self.current;
        self.current = next;

        Some(self.current)
    }
}


#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_fib_89() {
        assert_eq!(fib(89), vec![1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]);
    }

    #[test]
    fn test_sum_even_fib_89() {
        assert_eq!(sum_even_fib(89), 44);
    }

    #[test]
    fn test_sum_even_fib_4_000_000() {
        assert_eq!(sum_even_fib(4_000_000), 4613732);
    }

    #[test]
    fn test_sum_even_fib_2_4_000_000() {
        assert_eq!(sum_even_fib_2(4_000_000), 4613732);
    }

    #[test]
    fn test_sum_even_fib_3_4_000_000() {
        assert_eq!(sum_even_fib_3(4_000_000), 4613732);
    }

    #[test]
    fn test_sum_even_fib_4_4_000_000() {
        assert_eq!(sum_even_fib_4(4_000_000), 4613732);
    }

}
